三种特性：封装、多态和继承
六大原则：
1、单一责任原则
2、开闭原则：对扩展开发开放和对修改封闭
3、里氏替换原则：所有以用基类的地方必须能透明地使用其子类的对象
4、依赖倒置原则：高层次的模块不依赖于低层次模块的实现细节的目的{
    1)高层模块不应该依赖低层模块，两者都应该依赖其抽象
    2)抽象不应该依赖细节
    3)细节应该依赖抽象
}：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的
5、接口隔离原则：类间的依赖关系应该建立在最小的接口上
6、迪米特原则：一个对象应该对其他对象有最小的了解。一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者
没关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不管。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，
对另一个类的影响也越大。