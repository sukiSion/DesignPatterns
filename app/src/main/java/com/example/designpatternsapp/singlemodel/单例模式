定义：
确保某一个类只有一个实例，并且自行实例化并向整个系统提供这个实例
使用场景：
确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。
例如：创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源。
优点：
1、由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。
2、由于单例模式只生成一个实例，所以，减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，
则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决
3、单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作
4、单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理
缺点：
1、单例模式一半没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现
2、单例对象如果持有Context，那么容易引发内存泄漏，此时需要注意传递给单例对象的Context最好是Application Context


