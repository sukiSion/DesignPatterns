定义：使用共享对象可有效支持大量的细粒度的对象
使用场景：
1、系统中存在大量相似的对象
2、细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份
3、需要缓冲池的场景
优点：
它大幅度地降低内存中对象的数量。
缺点：
1、享元模式使得系统更加复杂。为了使对象可以共享，需要将一些状态外部化，这使得程序的逻辑复杂化
2、享元模式将享元对象的状态外部化，而读取外部状态使得运行事件稍微变长